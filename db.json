{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/uploads/about_me.jpg","path":"uploads/about_me.jpg","modified":0,"renderable":0},{"_id":"source/uploads/header_bg.jpg","path":"uploads/header_bg.jpg","modified":0,"renderable":0},{"_id":"source/uploads/me.png","path":"uploads/me.png","modified":0,"renderable":0},{"_id":"source/uploads/mylogo.png","path":"uploads/mylogo.png","modified":0,"renderable":0},{"_id":"source/uploads/facade-design-pattern/cover.png","path":"uploads/facade-design-pattern/cover.png","modified":1,"renderable":0},{"_id":"source/uploads/favicon_io/android-chrome-192x192.png","path":"uploads/favicon_io/android-chrome-192x192.png","modified":0,"renderable":0},{"_id":"source/uploads/favicon_io/apple-touch-icon.png","path":"uploads/favicon_io/apple-touch-icon.png","modified":0,"renderable":0},{"_id":"source/uploads/favicon_io/android-chrome-512x512.png","path":"uploads/favicon_io/android-chrome-512x512.png","modified":0,"renderable":0},{"_id":"source/uploads/favicon_io/favicon-16x16.png","path":"uploads/favicon_io/favicon-16x16.png","modified":0,"renderable":0},{"_id":"source/uploads/favicon_io/favicon-32x32.png","path":"uploads/favicon_io/favicon-32x32.png","modified":0,"renderable":0},{"_id":"source/uploads/favicon_io/favicon.ico","path":"uploads/favicon_io/favicon.ico","modified":0,"renderable":0},{"_id":"source/uploads/favicon_io/site.webmanifest","path":"uploads/favicon_io/site.webmanifest","modified":0,"renderable":0},{"_id":"source/uploads/leaking-domain-knowledge-antipattern/cover.png","path":"uploads/leaking-domain-knowledge-antipattern/cover.png","modified":0,"renderable":0},{"_id":"themes/stun/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/stun/source/images/algolia.svg","path":"images/algolia.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/header_bg.jpg","path":"images/header_bg.jpg","modified":0,"renderable":1},{"_id":"themes/stun/source/images/loading.svg","path":"images/loading.svg","modified":0,"renderable":1},{"_id":"themes/stun/source/js/header.js","path":"js/header.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/scroll.js","path":"js/scroll.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/stun-boot.js","path":"js/stun-boot.js","modified":0,"renderable":1},{"_id":"themes/stun/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/favicon-16x16.png","path":"images/icons/favicon-16x16.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/favicon-32x32.png","path":"images/icons/favicon-32x32.png","modified":0,"renderable":1},{"_id":"themes/stun/source/images/icons/stun-logo.svg","path":"images/icons/stun-logo.svg","modified":0,"renderable":1},{"_id":"source/uploads/facade-design-pattern/metaphor-facade.png","path":"uploads/facade-design-pattern/metaphor-facade.png","modified":1,"renderable":0},{"_id":"source/uploads/facade-design-pattern/UML.png","path":"uploads/facade-design-pattern/UML.png","modified":1,"renderable":0},{"_id":"source/uploads/facade-design-pattern/home-theater.jpg","path":"uploads/facade-design-pattern/home-theater.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/facade-design-pattern.md","hash":"4410840513276c01bc63f3608bd17993d7972be3","modified":1722378991612},{"_id":"source/_posts/leaking-domain-knowledge-antipattern.md","hash":"84b1964b96586317361196d2919aedfc30a72351","modified":1718581974642},{"_id":"source/categories/index.md","hash":"c8f1b5e9b44d36c51cb83f33ec5f6d6b3d5b5b52","modified":1718540448717},{"_id":"source/about/index.md","hash":"c9e8a6718b8bfd2ebe2f860f6cc96cc909c3b43a","modified":1718572806324},{"_id":"source/tags/index.md","hash":"69a3622e8f4f94e01f0a5977847a248e991460ec","modified":1718540982730},{"_id":"source/archives/index.md","hash":"bbc73b04525a47105e507a9d939bfe4083a88236","modified":1718540451496},{"_id":"source/uploads/favicon_io/apple-touch-icon.png","hash":"394f01da2fc22193bdb181f133521595125f607d","modified":1718556390000},{"_id":"source/uploads/favicon_io/favicon-16x16.png","hash":"c69dc960fc374fe59d3b4557ba5db2c330ef8803","modified":1718556390000},{"_id":"source/uploads/favicon_io/favicon-32x32.png","hash":"0d008df3c59b4581ffb312faf8c75d8e21939abd","modified":1718556390000},{"_id":"source/uploads/favicon_io/site.webmanifest","hash":"bf31baf91bdd2fcde24a45e3f2a1be33733c6f69","modified":1718556390000},{"_id":"source/uploads/favicon_io/favicon.ico","hash":"ac97fa2d68212cf61611cceec007210f4ffbe513","modified":1718556390000},{"_id":"source/uploads/favicon_io/android-chrome-192x192.png","hash":"35c05e2131934a2c2f4d8b24ff7308a25e03f9ed","modified":1718556390000},{"_id":"source/uploads/leaking-domain-knowledge-antipattern/cover.png","hash":"5d2f5b565de3c03846d3a59ecab39b03d3fddc54","modified":1718581526672},{"_id":"source/uploads/favicon_io/android-chrome-512x512.png","hash":"19493debace041077af9cb039067515c711b1fcd","modified":1718556390000},{"_id":"source/uploads/mylogo.png","hash":"71aa6253279aacd240d9b3df313b0c1c70481268","modified":1718497725185},{"_id":"source/uploads/about_me.jpg","hash":"47133530c996d3340e7f717e3991c35262f321eb","modified":1718565665047},{"_id":"themes/stun/.editorconfig","hash":"1ca001b8a7ed235eb9f5c21360b3a11eedb84ae7","modified":1718539113432},{"_id":"themes/stun/.commitlintrc.js","hash":"af8f006fbdfc6a1880605c7a35e63de300d6929b","modified":1718539113432},{"_id":"themes/stun/.gitignore","hash":"7745f04d70b1ea58b02d68dde999708836343c7a","modified":1718539113432},{"_id":"themes/stun/.eslintrc","hash":"1ba4f0ddd4bef04884c7fda6ef04f9d9697a62b4","modified":1718539113432},{"_id":"themes/stun/.cz-config.js","hash":"fbb89df58c60cf4f3827059d0574accc8407e1bb","modified":1718539113432},{"_id":"themes/stun/.stylintrc","hash":"3305c42a95c986341d7c7dd03ed9f37a42da343c","modified":1718539113433},{"_id":"themes/stun/.prettierrc","hash":"4b6589404c509f4538daf6f3b8b3ee2ec37d2f4c","modified":1718539113432},{"_id":"themes/stun/CHANGELOG.md","hash":"3a151a8ff5114122095ea48fbf7ae190a47c9258","modified":1718539113433},{"_id":"themes/stun/LICENSE","hash":"c79ab3fe0ee8f2388376574dfe704b3df0c70a69","modified":1718539113433},{"_id":"themes/stun/README.md","hash":"8173e27b1141adc4c9a739e5fd587f6621f3a97f","modified":1718539113433},{"_id":"themes/stun/FAQ.md","hash":"df56d44b1297fe507d8b4edefb303629f4b23c67","modified":1718539113433},{"_id":"themes/stun/README_en-US.md","hash":"6a85d8fe6646d110066d397a8a00e2afc3d80c6e","modified":1718539113433},{"_id":"themes/stun/package.json","hash":"e5eb23018c5c61ba1860bef585ad164a0c783eae","modified":1718539113438},{"_id":"themes/stun/languages/en.yml","hash":"e1348852aa00d2d57f5215c83709f6428f8e8a71","modified":1718539113433},{"_id":"themes/stun/languages/zh-CN.yml","hash":"8535e2d34d24769067ba7bd3d9c0b94d1fd01cc7","modified":1718539113433},{"_id":"themes/stun/languages/zh-HK.yml","hash":"aef25f329cc05dbe8e38753fccd98d63c9fcd174","modified":1718539113433},{"_id":"themes/stun/layout/_layout.pug","hash":"5052ee5040ae736d78ad208df7352be69b61b0d1","modified":1718539113433},{"_id":"themes/stun/languages/es.yml","hash":"e150c8a1f56ae9ed065611951aa124fb548577fc","modified":1718539113433},{"_id":"themes/stun/layout/archive.pug","hash":"d45d078ae4196add83e21fcaed3ef168b237af90","modified":1718539113436},{"_id":"themes/stun/_config.yml","hash":"9c2a8171ea0474c70ad0ac0c9ad50724b7ac6a40","modified":1718572824860},{"_id":"themes/stun/layout/index.pug","hash":"df40cf1f051fd29f0f51ace74e9f7394f6ea2ab7","modified":1718539113436},{"_id":"themes/stun/layout/page.pug","hash":"22ba5928bd9ae8c56b3242b7caa5fc3ec471b082","modified":1718539113436},{"_id":"themes/stun/scripts/engine.js","hash":"a63a57c9206a77a79f93dbd86e86204447d7d904","modified":1718539113438},{"_id":"themes/stun/scripts/merge-config.js","hash":"bb914100129c5ca2d1a9e087fffd7bedcb6ae6a6","modified":1718539113438},{"_id":"themes/stun/layout/category.pug","hash":"24153408b2971542d177227f09e93da7754bf75e","modified":1718539113436},{"_id":"themes/stun/layout/tag.pug","hash":"46f956ad7e2aed879999ddf5e768d80c4bbe5b5f","modified":1718539113436},{"_id":"themes/stun/layout/post.pug","hash":"a4d16dbb919df5d4ffdb5a1d0114a4e1c8c21197","modified":1718539113436},{"_id":"themes/stun/layout/_mixins/menu-item.pug","hash":"93c4454e48a6f1456c29aeb9d1332be186b49d4f","modified":1718539113433},{"_id":"themes/stun/layout/_mixins/meta-item.pug","hash":"3d74dc8ba8651efd4a605e56a21e314678d04057","modified":1718539113433},{"_id":"themes/stun/layout/_mixins/gallery.pug","hash":"3054e2c09bc205173c517fb1c36321f7c4c0db63","modified":1718539113433},{"_id":"themes/stun/layout/_mixins/post-header.pug","hash":"9486d07e56acf7bcc5d691bef93c19e2e5c98022","modified":1718539113433},{"_id":"themes/stun/layout/_mixins/timeline.pug","hash":"4e19a670f002d3c6bc740a2d6ef03964e6b59c09","modified":1718539113433},{"_id":"themes/stun/layout/_scripts/stun.pug","hash":"961554914427578b57ea3912d751d398f4eb381d","modified":1718539113434},{"_id":"themes/stun/layout/_partials/config.pug","hash":"4fb832652485161148ea957067c06d50ed11578b","modified":1718539113434},{"_id":"themes/stun/scripts/filters/external-link.js","hash":"f5369becfd8cc6e43d6dc3595b1edbe014d9aa7c","modified":1718539113438},{"_id":"themes/stun/scripts/filters/image-setting.js","hash":"412318b6d189d5355dbcc52c9762072f7ecdaad4","modified":1718539113438},{"_id":"themes/stun/scripts/filters/lazyload.js","hash":"d5baf39faeff5368182be1f59fb598d023985cde","modified":1718539113438},{"_id":"themes/stun/scripts/filters/post-heading.js","hash":"b504aa047e3f080fc3f95f3e96fad88bbbce20cb","modified":1718539113438},{"_id":"themes/stun/scripts/filters/shake-file.js","hash":"159dff6e4f7020545c9b151108398cd383d613e2","modified":1718539113438},{"_id":"themes/stun/scripts/filters/wrap-table.js","hash":"888c9eaaddcdb9b88d07837a9091aa39ed3fe677","modified":1718539113438},{"_id":"themes/stun/scripts/tags/button.js","hash":"2f3efa626c07f4b07d857bb4d53d9a416c2d1434","modified":1718539113438},{"_id":"themes/stun/scripts/tags/friends.js","hash":"c2fe1e8e128f464d772bcb7534efef54ad224310","modified":1718539113438},{"_id":"themes/stun/layout/_scripts/vendors.pug","hash":"62a6831d3b1d90d6c8335ce3402efc50e141eafb","modified":1718539113435},{"_id":"themes/stun/scripts/tags/note.js","hash":"b436593a56e3bab8dd59c71e73ac9efbc8fa29d4","modified":1718539113438},{"_id":"themes/stun/scripts/tags/table.js","hash":"177061e1bfb296981a101643f51a27ccc1469307","modified":1718539113439},{"_id":"themes/stun/layout/_third-party/pjax.pug","hash":"2980d58e2aeb7026b9b49fcc087df332cf20385b","modified":1718539113435},{"_id":"themes/stun/source/css/index.styl","hash":"8a75ec81fb064b0da2f978a064cc5bec2395f27d","modified":1718539113441},{"_id":"themes/stun/source/images/algolia.svg","hash":"90322f80db6ad0daf26ea3ec71dea6f691a8b2f1","modified":1718539113441},{"_id":"themes/stun/layout/_third-party/quicklink.pug","hash":"2bed65ed4d314dc587e2359e20ae099b46181ed5","modified":1718539113435},{"_id":"themes/stun/source/images/cc-by-nc-nd.svg","hash":"017ad912874686a982ebceae359299b8f2a492e2","modified":1718539113441},{"_id":"themes/stun/source/images/cc-by-nc-sa.svg","hash":"71d035c34219f924dbf1bf852166ee8fb58d2f24","modified":1718539113441},{"_id":"themes/stun/source/images/cc-by-nc.svg","hash":"4608189edbe7636dd651df65473298a3c5afb20d","modified":1718539113441},{"_id":"themes/stun/source/images/cc-by-sa.svg","hash":"0455a8857ba096925d4145a56e8d10537fccb378","modified":1718539113441},{"_id":"themes/stun/source/images/cc-by-nd.svg","hash":"20c66ae3c393903e6eab3bc8cf7c3be6d753f9f8","modified":1718539113441},{"_id":"themes/stun/source/images/cc-by.svg","hash":"77f74c241902447424207869c74cb9d9264bdced","modified":1718539113441},{"_id":"themes/stun/source/js/scroll.js","hash":"8926ab87181a49c730ce5132518b608c54b8cdb1","modified":1718539113442},{"_id":"themes/stun/source/images/loading.svg","hash":"32a6e770d217ae6c0cf0f6beef3172f1b5b9a0a2","modified":1718539113442},{"_id":"themes/stun/source/js/header.js","hash":"63d407ee6f80114e220171ba829b79b28d420fe0","modified":1718539113442},{"_id":"themes/stun/source/js/stun-boot.js","hash":"8358ac0d879c0ca340c52e4de606523c2a91e156","modified":1718539113442},{"_id":"themes/stun/source/js/sidebar.js","hash":"20adff7f54bcd8299d32690d41ebc7a4eb7a8728","modified":1718539113442},{"_id":"themes/stun/layout/_partials/analytics/busuanzi.pug","hash":"80d2f4f8706a96b367ac1e89f5b56ada4684d571","modified":1718539113434},{"_id":"themes/stun/source/js/utils.js","hash":"b570eafe77e47d7701348f172a4dbaaba6fa8123","modified":1718539113442},{"_id":"themes/stun/layout/_partials/head/head.pug","hash":"557dd7b8070459151e44329537c68235d641dd29","modified":1718539113434},{"_id":"themes/stun/layout/_partials/header/header.pug","hash":"c3473b2d10e3543624ef194ecee5d4531f1cbd52","modified":1718539113434},{"_id":"themes/stun/layout/_partials/footer/footer.pug","hash":"9a8e56bcc504f251c13ee3d0d18a08142fb7ee43","modified":1718539113434},{"_id":"themes/stun/layout/_partials/head/kill-old-ie.pug","hash":"427a95d02844f29e63c5e9f014ede3609aec1a5b","modified":1718539113434},{"_id":"themes/stun/layout/_partials/post/post-list.pug","hash":"c049078009aa251fc76cd948837c7a5efdd39cb2","modified":1718539113434},{"_id":"themes/stun/layout/_partials/search/algolia.pug","hash":"61181bece0e27929fe00df5204fefd8dee31a354","modified":1718539113434},{"_id":"themes/stun/layout/_partials/search/assist-btns.pug","hash":"7e6dc0d975ccbe291116487b15277d27a391fb9a","modified":1718539113434},{"_id":"themes/stun/layout/_partials/search/index.pug","hash":"0f84aa013a96e7eb3bb25b87f20bab9b7ac55538","modified":1718539113434},{"_id":"themes/stun/layout/_partials/sidebar/sidebar.pug","hash":"18173a2acf99db39748c392f2e669acd805b4090","modified":1718539113434},{"_id":"themes/stun/layout/_partials/search/localsearch.pug","hash":"4d8e0bc33f92a603e0b2a5f4296af6bcc7cc31b8","modified":1718539113434},{"_id":"themes/stun/layout/_partials/widgets/back2top.pug","hash":"48b7fedeb472bd01fd1f3317359a10e83ca919e1","modified":1718539113434},{"_id":"themes/stun/layout/_partials/widgets/copyright.pug","hash":"0938c885697f6eb388b28ddbf88f5631d024fe73","modified":1718539113434},{"_id":"themes/stun/layout/_partials/widgets/loading-bar.pug","hash":"6cda7866f9589c9ffc05ce4a3d7c33b706e70324","modified":1718539113434},{"_id":"themes/stun/layout/_partials/widgets/night-mode.pug","hash":"c7f9bd67cd231b9bd40a84123644e009ac8d8ef3","modified":1718539113434},{"_id":"themes/stun/layout/_partials/widgets/paginator.pug","hash":"b0045dcb9b151ee31f1db5b7d741f10ef3b74be0","modified":1718539113434},{"_id":"themes/stun/layout/_partials/widgets/comments.pug","hash":"af1b16be74c7e1242e0f57986672dc73e93546e2","modified":1718539113434},{"_id":"themes/stun/layout/_partials/widgets/reward.pug","hash":"c9081c1dcf0ca18df06d23638654d8f43b28d55c","modified":1718539113434},{"_id":"themes/stun/layout/_partials/widgets/share.pug","hash":"1bb3d25298b7ee6a28150aa286ed6b0ae42ead4f","modified":1718539113434},{"_id":"themes/stun/layout/_partials/widgets/sticky-top.pug","hash":"bf86b2f9f4b1471afb8b31965d3230f6088682ae","modified":1718539113434},{"_id":"themes/stun/layout/_third-party/advertising/google-adsense.pug","hash":"e489020f1130976d3ec2245915ede6319d89b89c","modified":1718539113435},{"_id":"themes/stun/layout/_third-party/analytics/baidu-analytics.pug","hash":"f7300991a29dbe2e8091a588dfa8c65c3dee6302","modified":1718539113435},{"_id":"themes/stun/layout/_third-party/advertising/index.pug","hash":"1285cd65a873f688ae3c51846c1284447f502adc","modified":1718539113435},{"_id":"themes/stun/layout/_third-party/analytics/busuanzi.pug","hash":"78a4fc9c9380e31536f5b500638f2d005accd361","modified":1718539113435},{"_id":"themes/stun/layout/_third-party/analytics/index.pug","hash":"f2b1a5131a1712c36323e3ca1228f9e91eb095a1","modified":1718539113435},{"_id":"themes/stun/layout/_third-party/comments/disqus.pug","hash":"57bcbaac3d237d9168dd8f4b682f34351f11d250","modified":1718539113435},{"_id":"themes/stun/layout/_third-party/analytics/google-analytics.pug","hash":"4eef66fbb8a8ad55e0868cf4b77a6b7bca0e7f35","modified":1718539113435},{"_id":"themes/stun/layout/_third-party/comments/fbcomments.pug","hash":"fb651812c87dc5e2134d7fb7d8f98d4d4227f1f6","modified":1718539113435},{"_id":"themes/stun/layout/_third-party/comments/gitalk.pug","hash":"c2a90e80c51b5b99e6804dbed5457a071b980bbd","modified":1718539113435},{"_id":"themes/stun/layout/_third-party/comments/livere.pug","hash":"687f74a998519608944b40a41f3a98ccf4535139","modified":1718539113435},{"_id":"themes/stun/layout/_third-party/comments/minivaline.pug","hash":"5584ade7dd19deca418373115bde9d563d37d826","modified":1718539113435},{"_id":"themes/stun/layout/_third-party/comments/index.pug","hash":"bec4d9c8ea360637e7da3314fa987e33facd8071","modified":1718539113435},{"_id":"themes/stun/layout/_third-party/comments/utterances.pug","hash":"6418baeb3aedcddb02a64bd89b26ac12e18551c8","modified":1718539113435},{"_id":"themes/stun/layout/_third-party/math/index.pug","hash":"e952be6c736545e73c0e02f833f87a4f8c5a2582","modified":1718539113435},{"_id":"themes/stun/layout/_third-party/comments/valine.pug","hash":"b519a6948d6ef37c037385e3e3f9590c17f7ad62","modified":1718539113435},{"_id":"themes/stun/layout/_third-party/comments/waline.pug","hash":"fd4c958b13777752f176556c7b109b7dede7cc68","modified":1718539113435},{"_id":"themes/stun/layout/_third-party/math/katex.pug","hash":"345c59fe76a7c83b529328e5144d1036cb14f533","modified":1718539113435},{"_id":"themes/stun/layout/_third-party/math/mathjax.pug","hash":"72d51538cc85f01c8c64db74b9219ccaf334c9e9","modified":1718539113435},{"_id":"themes/stun/layout/_third-party/search/index.pug","hash":"0f84aa013a96e7eb3bb25b87f20bab9b7ac55538","modified":1718539113435},{"_id":"themes/stun/source/css/_common/index.styl","hash":"86057db6cb18263866d62a6669feee8752882398","modified":1718539113441},{"_id":"themes/stun/source/css/_custom/index.styl","hash":"fd3830416aabf66c0c4f95ca815b953ff3bf281f","modified":1718576999959},{"_id":"themes/stun/layout/_third-party/search/algolia.pug","hash":"54233748e22ceae063f70ee49b44c4bd0a78f391","modified":1718539113435},{"_id":"themes/stun/layout/_third-party/search/localsearch.pug","hash":"d98db7ed7e3e4c574212fa9d75adba681f3d0687","modified":1718539113436},{"_id":"themes/stun/source/css/_mixins/index.styl","hash":"f3060519f3acd05cb4b26bb5f6a5c6b857cb0d68","modified":1718539113441},{"_id":"themes/stun/source/images/icons/favicon-16x16.png","hash":"7bfd64eac26e17ea162f0c399a4a40164c26b412","modified":1718539113441},{"_id":"themes/stun/source/css/_common/responsive.styl","hash":"618c6005f1bc7c482fa37ae3ce15729a64044d9d","modified":1718539113441},{"_id":"themes/stun/source/css/_variables/index.styl","hash":"b80cbb67de691b616481b282d591eef92e487e25","modified":1718539113441},{"_id":"themes/stun/source/images/icons/stun-logo.svg","hash":"069dc7590ad152373f1c346d892e32faa2bbdd87","modified":1718539113442},{"_id":"themes/stun/source/images/icons/favicon-32x32.png","hash":"02fead07726920400ede57ddfdbf071dd7203fd5","modified":1718539113442},{"_id":"themes/stun/source/css/_common/components/index.styl","hash":"a54720db94121efd1a34ac88d344197c8206837e","modified":1718539113439},{"_id":"themes/stun/source/css/_common/outline/macro.styl","hash":"13b96f239de15e1cfdc14d9c80e6959506556dd2","modified":1718539113441},{"_id":"themes/stun/source/css/_common/outline/index.styl","hash":"467d4171c0690a95d40fbecea02e6b212b7c74f1","modified":1718539113441},{"_id":"themes/stun/source/css/_common/scaffolding/base.styl","hash":"4064a7e2c3f71d2ed72a47edd60e9be01af6c354","modified":1718539113441},{"_id":"themes/stun/source/css/_common/scaffolding/index.styl","hash":"e750f2dae9eb3385039ee018ff8001b0e6ec3b64","modified":1718539113441},{"_id":"themes/stun/source/css/_common/scaffolding/normalize.styl","hash":"c15a9616fddb267431416304d709185aeb3d45f5","modified":1718539113441},{"_id":"themes/stun/source/css/_common/components/analytics/busuanzi.styl","hash":"d196c88ea2e9b851e8d8f9c5a315dfc2929eb897","modified":1718539113439},{"_id":"themes/stun/source/css/_common/scaffolding/utils.styl","hash":"7e62f34521ea539a25a101f25e1684e3a3ac4be8","modified":1718539113441},{"_id":"themes/stun/source/css/_common/components/analytics/index.styl","hash":"339a43fd5ee97a77775b723118f6ab1af754fed4","modified":1718539113439},{"_id":"themes/stun/source/css/_common/components/footer/index.styl","hash":"14464841145cf3ecab66f1094653daa033c261eb","modified":1718539113439},{"_id":"themes/stun/source/css/_common/components/highlight/diff.styl","hash":"056e70f6dfe45ec50427d7ab293d33361c9b956f","modified":1718539113439},{"_id":"themes/stun/source/css/_common/components/highlight/theme.styl","hash":"dfc99b05302f8203040431e563c9f63d63da46de","modified":1718539113439},{"_id":"themes/stun/source/css/_common/components/highlight/highlight.styl","hash":"bc0b01021a0d19b2c98f0c5c9fa1af96d67c1099","modified":1718539113439},{"_id":"themes/stun/source/css/_common/components/highlight/index.styl","hash":"85848179cbc78152d2521b601ac9f888dea4e255","modified":1718539113439},{"_id":"themes/stun/source/css/_common/components/plugins/friends.styl","hash":"bdb015173f8e5fa391fc4fb2b2a8d42787022c4b","modified":1718539113439},{"_id":"themes/stun/source/css/_common/components/plugins/button.styl","hash":"8800a2dd524cec56e23e8f255e24d3d59073b690","modified":1718539113439},{"_id":"themes/stun/source/css/_common/components/plugins/table.styl","hash":"98cacc91e42f5e45279e2174a90ab26171085e2f","modified":1718539113439},{"_id":"themes/stun/source/css/_common/components/plugins/index.styl","hash":"7d06bf0c61c6a3ec3bfa31684477fd9a07f1c098","modified":1718539113439},{"_id":"themes/stun/source/css/_common/components/plugins/note.styl","hash":"ae0ad9b44a87839d220792336478a9ae6db11c47","modified":1718539113439},{"_id":"themes/stun/source/css/_common/components/header/index.styl","hash":"904af0e73cdf0767ec781271856d7b5b63e043ef","modified":1718539113439},{"_id":"themes/stun/source/css/_common/components/pages/index.styl","hash":"463a4e6a92ec5f757e167fbeb171e4e92e83a822","modified":1718539113439},{"_id":"themes/stun/source/css/_common/components/pages/page.styl","hash":"df732e267dfd9f1bda6a8cf1ede3198a205925f9","modified":1718539113439},{"_id":"themes/stun/source/css/_common/components/pages/timeline.styl","hash":"21e9c8def1613030f0927e2ce80f4ecc721f078e","modified":1718539113439},{"_id":"themes/stun/source/css/_common/components/post/index.styl","hash":"08aad11e329cda0550efef226e0c4d0bb4540454","modified":1718539113440},{"_id":"themes/stun/source/css/_common/components/post/post-list.styl","hash":"d0ed844e28533f832cbd9b3f09203d16936628f7","modified":1718539113440},{"_id":"themes/stun/source/css/_common/components/post/post.styl","hash":"8b7b22225b40d028efee689d3700a9796291cb8d","modified":1718539113440},{"_id":"themes/stun/source/css/_common/components/search/index.styl","hash":"1990d2c2a9bfe8e09d656f0c2ae6cf0c9f7f5542","modified":1718539113440},{"_id":"themes/stun/source/css/_common/components/search/algolia.styl","hash":"fb62e4baf25a66e46c27783be5d79353ec394b44","modified":1718543799517},{"_id":"themes/stun/source/css/_common/components/search/localsearch.styl","hash":"bf1ac1b8ee8c4daaa7e6b47eec097a176624e6d0","modified":1718539113440},{"_id":"themes/stun/source/css/_common/components/search/common.styl","hash":"1939b7dfbcf557794a188fbf8fec4ef2b5afa437","modified":1718539113440},{"_id":"themes/stun/source/css/_common/components/sidebar/index.styl","hash":"02138647437f7e8ee8927cae225d41072d936bdc","modified":1718539113440},{"_id":"themes/stun/source/css/_common/components/widgets/back2top.styl","hash":"b3da5ea71a9947e781056d1bd7d42e4045fa2aca","modified":1718539113440},{"_id":"themes/stun/source/css/_common/components/widgets/copyright.styl","hash":"1d28fc8f76f7164a306ed81a9ede21c0a2b0f7cd","modified":1718539113440},{"_id":"themes/stun/source/css/_common/components/widgets/comments.styl","hash":"41d229ac4fa02a3a8b46687ccbafa7a608008e2f","modified":1718539113440},{"_id":"themes/stun/source/css/_common/components/widgets/copy-button.styl","hash":"378961fa7c986e3313053814806902bf76204a93","modified":1718539113440},{"_id":"themes/stun/source/css/_common/components/widgets/font-icon.styl","hash":"bdda0953611378e93a8d6387cbdc93e1de4f7f0a","modified":1718539113440},{"_id":"themes/stun/source/css/_common/components/widgets/fancybox.styl","hash":"3d677c0323d77199bb9fbfefd65e97d8b882d7b3","modified":1718539113440},{"_id":"themes/stun/source/css/_common/components/widgets/index.styl","hash":"03ffdc55fd5fb64c3158bc222d0e8e9d7844686b","modified":1718539113440},{"_id":"themes/stun/source/css/_common/components/widgets/lazyload.styl","hash":"eced96235f0ff5dc6a8fd068d4ed05934a29b430","modified":1718539113440},{"_id":"themes/stun/source/css/_common/components/widgets/ending.styl","hash":"63985ca9a3f6c481cc60207966fa1267de14d945","modified":1718539113440},{"_id":"themes/stun/source/css/_common/components/widgets/gallery-image.styl","hash":"99b1cc42f38816083f93233778b299422b6d8f32","modified":1718539113440},{"_id":"themes/stun/source/css/_common/components/widgets/night-mode.styl","hash":"9caeef13a913aba38976f082e1f0ca191bffc64e","modified":1718539113440},{"_id":"themes/stun/source/css/_common/components/widgets/paginator.styl","hash":"71ddb6a1e9664a4fde04a0ce143b8786ba6e0089","modified":1718539113440},{"_id":"themes/stun/source/css/_common/components/widgets/loading-bar.styl","hash":"9f23e8762d01fb4a3cbf5e786fdead2926849e8a","modified":1718539113440},{"_id":"themes/stun/source/css/_common/components/widgets/reward.styl","hash":"de1130ec3765879884cbdc77a15b458da6e37bcc","modified":1718539113440},{"_id":"themes/stun/source/css/_common/components/widgets/share.styl","hash":"fe32e3434107d92cefd7aacfdcef526a93c4b865","modified":1718539113440},{"_id":"themes/stun/source/css/_common/components/widgets/zoom-image.styl","hash":"40f832a199320642debabe32910c1168e3c6e40c","modified":1718539113440},{"_id":"themes/stun/source/css/_common/components/widgets/sticky-top.styl","hash":"f0e37944168a74a64b18dc54c6fde2308e4bf023","modified":1718539113440},{"_id":"source/uploads/facade-design-pattern/cover.png","hash":"c30ea4dfdf121d6f7ce6062dcec125dd05851eae","modified":1722372059714},{"_id":"source/uploads/me.png","hash":"b45e8a002df969cb585fa551b744c1d2f0d2b600","modified":1718550732341},{"_id":"source/uploads/facade-design-pattern/metafor-facade.png","hash":"20f1b45c0b675b5f8a6a3ed9d04e7ca4b6e1b9fd","modified":1722370789191},{"_id":"themes/stun/package-lock.json","hash":"b4e381253a3f0dd2c6ce49763b30ac2c03cba387","modified":1718539113438},{"_id":"source/uploads/header_bg.jpg","hash":"9e7ffd33b6509efe97b1e7b5ba5f75c7e5a02fe1","modified":1718548880999},{"_id":"themes/stun/source/images/header_bg.jpg","hash":"9e7ffd33b6509efe97b1e7b5ba5f75c7e5a02fe1","modified":1718548046901},{"_id":"source/uploads/facade-design-pattern/UML.png","hash":"49299790ac576eb62e9d2741b8b77fee0c2d41fa","modified":1722377017650},{"_id":"source/uploads/facade-design-pattern/home-theater.jpg","hash":"a0c6707e623311051a1344508970c0bf224382dc","modified":1722378943759},{"_id":"source/uploads/facade-design-pattern/metaphor-facade.png","hash":"20f1b45c0b675b5f8a6a3ed9d04e7ca4b6e1b9fd","modified":1722370789191},{"_id":"public/search.xml","hash":"1a1dc1b80e508297b4f27fc294a668364f21b315","modified":1722379385827},{"_id":"public/about/index.html","hash":"862370f968bf57ad9b739c4d5c8e72787a24d8f4","modified":1722379385827},{"_id":"public/archives/index.html","hash":"4999aa4799f6f5e1e8029bf2797900a13c25d435","modified":1722379385827},{"_id":"public/categories/index.html","hash":"fdba00ff6ae6355165bb788549da4cb4db2847f8","modified":1722379385827},{"_id":"public/tags/index.html","hash":"777f3449c5959ed1aac7a63db5351841d4776443","modified":1722379385827},{"_id":"public/2024/07/30/facade-design-pattern/index.html","hash":"de6a322b2f02f95400f7fa510c5fc39e1a7fd7cc","modified":1722379385827},{"_id":"public/2024/06/17/leaking-domain-knowledge-antipattern/index.html","hash":"1bf565399b6c645fa9e169ac19eb4b4a913ded8b","modified":1722379385827},{"_id":"public/archives/2024/index.html","hash":"13ce21c8b23509080cadd4676620ba3ccafbcc35","modified":1722379385827},{"_id":"public/archives/2024/06/index.html","hash":"db5b113312ae11603537f2c59bc8903a9fd682c1","modified":1722379385827},{"_id":"public/archives/2024/07/index.html","hash":"7cbe4f5d8238021cbef0ba6e276bcce0bccd513d","modified":1722379385827},{"_id":"public/categories/design-pattern/index.html","hash":"911dcb9386e1f2ef901edcaafacfc5700b311889","modified":1722379385827},{"_id":"public/categories/unit-testing/index.html","hash":"1ece1599a30d7aff77acec400f7aab570ef5bc75","modified":1722379385827},{"_id":"public/index.html","hash":"1a0d544e13565f6f0eacab62337dbfb9587403e2","modified":1722379385827},{"_id":"public/tags/design-pattern/index.html","hash":"57e22309a7ce5c8b83d0effe8c530e00a8a45402","modified":1722379385827},{"_id":"public/tags/unit-testing/index.html","hash":"631a2afffa904ed7b364c98c3a568585ae4eece1","modified":1722379385827},{"_id":"public/tags/anti-pattern/index.html","hash":"5d80e50b70e1227dcc55508aca7af426c4dc5677","modified":1722379385827},{"_id":"public/uploads/favicon_io/apple-touch-icon.png","hash":"394f01da2fc22193bdb181f133521595125f607d","modified":1722379385827},{"_id":"public/uploads/favicon_io/favicon-32x32.png","hash":"0d008df3c59b4581ffb312faf8c75d8e21939abd","modified":1722379385827},{"_id":"public/uploads/favicon_io/favicon.ico","hash":"ac97fa2d68212cf61611cceec007210f4ffbe513","modified":1722379385827},{"_id":"public/uploads/favicon_io/favicon-16x16.png","hash":"c69dc960fc374fe59d3b4557ba5db2c330ef8803","modified":1722379385827},{"_id":"public/uploads/favicon_io/site.webmanifest","hash":"bf31baf91bdd2fcde24a45e3f2a1be33733c6f69","modified":1722379385827},{"_id":"public/images/cc-by-nc-nd.svg","hash":"017ad912874686a982ebceae359299b8f2a492e2","modified":1722379385827},{"_id":"public/images/cc-by-nc-sa.svg","hash":"71d035c34219f924dbf1bf852166ee8fb58d2f24","modified":1722379385827},{"_id":"public/images/algolia.svg","hash":"90322f80db6ad0daf26ea3ec71dea6f691a8b2f1","modified":1722379385827},{"_id":"public/images/cc-by-nc.svg","hash":"4608189edbe7636dd651df65473298a3c5afb20d","modified":1722379385827},{"_id":"public/images/cc-by-nd.svg","hash":"20c66ae3c393903e6eab3bc8cf7c3be6d753f9f8","modified":1722379385827},{"_id":"public/images/cc-by-sa.svg","hash":"0455a8857ba096925d4145a56e8d10537fccb378","modified":1722379385827},{"_id":"public/images/cc-by.svg","hash":"77f74c241902447424207869c74cb9d9264bdced","modified":1722379385827},{"_id":"public/images/loading.svg","hash":"32a6e770d217ae6c0cf0f6beef3172f1b5b9a0a2","modified":1722379385827},{"_id":"public/images/icons/favicon-16x16.png","hash":"7bfd64eac26e17ea162f0c399a4a40164c26b412","modified":1722379385827},{"_id":"public/images/icons/favicon-32x32.png","hash":"02fead07726920400ede57ddfdbf071dd7203fd5","modified":1722379385827},{"_id":"public/images/icons/stun-logo.svg","hash":"069dc7590ad152373f1c346d892e32faa2bbdd87","modified":1722379385827},{"_id":"public/uploads/facade-design-pattern/UML.png","hash":"49299790ac576eb62e9d2741b8b77fee0c2d41fa","modified":1722379385827},{"_id":"public/uploads/favicon_io/android-chrome-192x192.png","hash":"35c05e2131934a2c2f4d8b24ff7308a25e03f9ed","modified":1722379385827},{"_id":"public/uploads/facade-design-pattern/home-theater.jpg","hash":"a0c6707e623311051a1344508970c0bf224382dc","modified":1722379385827},{"_id":"public/css/index.css","hash":"0a80a24466c9819d7791ad983e6a5b84ed69f5b0","modified":1722379385827},{"_id":"public/js/header.js","hash":"63d407ee6f80114e220171ba829b79b28d420fe0","modified":1722379385827},{"_id":"public/js/scroll.js","hash":"8926ab87181a49c730ce5132518b608c54b8cdb1","modified":1722379385827},{"_id":"public/js/sidebar.js","hash":"20adff7f54bcd8299d32690d41ebc7a4eb7a8728","modified":1722379385827},{"_id":"public/js/stun-boot.js","hash":"8358ac0d879c0ca340c52e4de606523c2a91e156","modified":1722379385827},{"_id":"public/js/utils.js","hash":"b570eafe77e47d7701348f172a4dbaaba6fa8123","modified":1722379385827},{"_id":"public/uploads/leaking-domain-knowledge-antipattern/cover.png","hash":"5d2f5b565de3c03846d3a59ecab39b03d3fddc54","modified":1722379385827},{"_id":"public/uploads/favicon_io/android-chrome-512x512.png","hash":"19493debace041077af9cb039067515c711b1fcd","modified":1722379385827},{"_id":"public/uploads/mylogo.png","hash":"71aa6253279aacd240d9b3df313b0c1c70481268","modified":1722379385827},{"_id":"public/uploads/about_me.jpg","hash":"47133530c996d3340e7f717e3991c35262f321eb","modified":1722379385827},{"_id":"public/uploads/facade-design-pattern/cover.png","hash":"c30ea4dfdf121d6f7ce6062dcec125dd05851eae","modified":1722379385827},{"_id":"public/uploads/me.png","hash":"b45e8a002df969cb585fa551b744c1d2f0d2b600","modified":1722379385827},{"_id":"public/uploads/facade-design-pattern/metaphor-facade.png","hash":"20f1b45c0b675b5f8a6a3ed9d04e7ca4b6e1b9fd","modified":1722379385827},{"_id":"public/uploads/header_bg.jpg","hash":"9e7ffd33b6509efe97b1e7b5ba5f75c7e5a02fe1","modified":1722379385827},{"_id":"public/images/header_bg.jpg","hash":"9e7ffd33b6509efe97b1e7b5ba5f75c7e5a02fe1","modified":1722379385827}],"Category":[{"name":"design pattern","_id":"clz8vp3fd00043ovkbjan269c"},{"name":"unit testing","_id":"clz8vp3ff00083ovk6k942vq2"}],"Data":[],"Page":[{"title":"about","date":"2024-06-16T18:51:48.000Z","_content":"\nA Software Developer in love with Technology, with over 10+ years of experience.\n\nBeyond my professional life, I have a deep appreciation for continuous learning and self-development. I enjoy reading a wide range of books that expand my knowledge and inspire personal growth. Art and creativity also play a significant role in my life, allowing me to approach problem-solving with a unique perspective.\n\nStaying active and healthy is important to me, which is why I engage in various sports and cherish outdoor activities such as hiking. These hobbies not only keep me physically fit but also provide a perfect balance to my IT-centric career, fueling my creativity and productivity.\n\nI am currently working as a .Net Full Stack developer.\n\n⚙ Tech Stack:\n - ASP.NET Web API\n - Angular\n - MS SQL Server\n - Entity Framework Core\n\n<h3 style=\"text-align: center;\">~ Welcome to my blog ~</h3>\n<img src=\"/uploads/about_me.jpg\" alt=\"Description\" width=\"500\">\n\n\n <br>\n <p style=\"text-align: center;\">You can contact me via email at: <a href=\"mailto:alexandr.sco@gmail.com\">alexandr.sco@gmail.com</a></p>","source":"about/index.md","raw":"---\ntitle: about\ndate: 2024-06-16 21:51:48\n---\n\nA Software Developer in love with Technology, with over 10+ years of experience.\n\nBeyond my professional life, I have a deep appreciation for continuous learning and self-development. I enjoy reading a wide range of books that expand my knowledge and inspire personal growth. Art and creativity also play a significant role in my life, allowing me to approach problem-solving with a unique perspective.\n\nStaying active and healthy is important to me, which is why I engage in various sports and cherish outdoor activities such as hiking. These hobbies not only keep me physically fit but also provide a perfect balance to my IT-centric career, fueling my creativity and productivity.\n\nI am currently working as a .Net Full Stack developer.\n\n⚙ Tech Stack:\n - ASP.NET Web API\n - Angular\n - MS SQL Server\n - Entity Framework Core\n\n<h3 style=\"text-align: center;\">~ Welcome to my blog ~</h3>\n<img src=\"/uploads/about_me.jpg\" alt=\"Description\" width=\"500\">\n\n\n <br>\n <p style=\"text-align: center;\">You can contact me via email at: <a href=\"mailto:alexandr.sco@gmail.com\">alexandr.sco@gmail.com</a></p>","updated":"2024-06-16T21:20:06.324Z","path":"about/index.html","comments":1,"layout":"page","_id":"clz8vp3f700003ovk041j0h9h","content":"<p>A Software Developer in love with Technology, with over 10+ years of experience.</p>\n<p>Beyond my professional life, I have a deep appreciation for continuous learning and self-development. I enjoy reading a wide range of books that expand my knowledge and inspire personal growth. Art and creativity also play a significant role in my life, allowing me to approach problem-solving with a unique perspective.</p>\n<p>Staying active and healthy is important to me, which is why I engage in various sports and cherish outdoor activities such as hiking. These hobbies not only keep me physically fit but also provide a perfect balance to my IT-centric career, fueling my creativity and productivity.</p>\n<p>I am currently working as a .Net Full Stack developer.</p>\n<p>⚙ Tech Stack:</p>\n<ul>\n<li>ASP.NET Web API</li>\n<li>Angular</li>\n<li>MS SQL Server</li>\n<li>Entity Framework Core</li>\n</ul>\n<h3 style=\"text-align: center;\">~ Welcome to my blog ~</h3>\n<img src=\"/uploads/about_me.jpg\" alt=\"Description\" width=\"500\">\n\n\n <br>\n <p style=\"text-align: center;\">You can contact me via email at: <span class=\"exturl\"><a class=\"exturl__link\"   href=\"mailto:alexandr.sco@gmail.com\" >alexandr.sco@gmail.com</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>","excerpt":"","more":"<p>A Software Developer in love with Technology, with over 10+ years of experience.</p>\n<p>Beyond my professional life, I have a deep appreciation for continuous learning and self-development. I enjoy reading a wide range of books that expand my knowledge and inspire personal growth. Art and creativity also play a significant role in my life, allowing me to approach problem-solving with a unique perspective.</p>\n<p>Staying active and healthy is important to me, which is why I engage in various sports and cherish outdoor activities such as hiking. These hobbies not only keep me physically fit but also provide a perfect balance to my IT-centric career, fueling my creativity and productivity.</p>\n<p>I am currently working as a .Net Full Stack developer.</p>\n<p>⚙ Tech Stack:</p>\n<ul>\n<li>ASP.NET Web API</li>\n<li>Angular</li>\n<li>MS SQL Server</li>\n<li>Entity Framework Core</li>\n</ul>\n<h3 style=\"text-align: center;\">~ Welcome to my blog ~</h3>\n<img src=\"/uploads/about_me.jpg\" alt=\"Description\" width=\"500\">\n\n\n <br>\n <p style=\"text-align: center;\">You can contact me via email at: <span class=\"exturl\"><a class=\"exturl__link\"   href=\"mailto:alexandr.sco@gmail.com\" >alexandr.sco@gmail.com</a><span class=\"exturl__icon\"><i class=\"fas fa-external-link-alt\"></i></span></span></p>"},{"title":"archives","date":"2024-06-16T12:20:23.000Z","type":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2024-06-16 15:20:23\ntype: \"archives\"\n---\n","updated":"2024-06-16T12:20:51.496Z","path":"archives/index.html","comments":1,"layout":"page","_id":"clz8vp3fb00023ovkf6ut38ta","content":"","excerpt":"","more":""},{"title":"categories","date":"2024-06-16T12:15:14.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2024-06-16 15:15:14\ntype: \"categories\"\n---\n","updated":"2024-06-16T12:20:48.717Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clz8vp3fe00063ovk0bnqgd54","content":"","excerpt":"","more":""},{"title":"tags","date":"2024-06-16T12:29:00.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2024-06-16 15:29:00\ntype: \"tags\"\n---\n","updated":"2024-06-16T12:29:42.730Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clz8vp3fe00073ovkdnvu9e7c","content":"","excerpt":"","more":""}],"Post":[{"title":"Facade - Design Pattern","date":"2024-07-30T20:13:12.000Z","thumbnail":"uploads/facade-design-pattern/cover.png","banner":"uploads/facade-design-pattern/cover.png","_content":"![Alt Text](uploads/facade-design-pattern/cover.png)\n# What is the Facade Design Pattern?\n**The Facade design pattern** is a structural pattern that provides a simplified interface to a complex system of classes, libraries, or frameworks. It hides the complexities of the system and makes it easier to use by providing a unified, high-level interface.\n\n<!--more-->\n\n# Metaphor\n![Alt Text](uploads/facade-design-pattern/metaphor-facade.png)\nIn this image, we see an interface through which we can easily drive the car. The driver, through this high-level interface, interacts with other complicated subsystems (engine, other components). The driver may not know these subsystems, but can use this high-level interface, which represents the Facade, to drive the car.\n\n# UML Diagram\n![Alt Text](uploads/facade-design-pattern/UML.png)\n\n# Advantages of Using the Facade Pattern\n1. **Simplified Interface**: The Facade pattern provides a single, easy-to-use interface for complex subsystems.\n2. **Reduces Complexity**: By hiding the intricate details of the subsystems, it reduces the learning curve and eases the use of the system.\n3. **Decoupling**: It decouples the client code from the subsystem, making the code more modular and easier to maintain.\n4. **Improved Code Readability**: Simplified interfaces improve the readability and manageability of the code.\n\n# Implementing the Facade Pattern in C#\nConsider a scenario where we have a complex system for managing a home theater. It consists of several subsystems: Amplifier, DVDPlayer, Projector, and Screen. Let's implement a Facade for this system.\n\n![Alt Text](uploads/facade-design-pattern/home-theater.jpg)\n\n## Subsystem classes\n``` csharp\npublic class Amplifier\n{\n    public void On() => Console.WriteLine(\"Amplifier is on\");\n    public void Off() => Console.WriteLine(\"Amplifier is off\");\n    public void SetVolume(int level) => Console.WriteLine($\"Amplifier volume set to {level}\");\n}\n\npublic class DVDPlayer\n{\n    public void On() => Console.WriteLine(\"DVD Player is on\");\n    public void Off() => Console.WriteLine(\"DVD Player is off\");\n    public void Play(string movie) => Console.WriteLine($\"Playing movie: {movie}\");\n}\n\npublic class Projector\n{\n    public void On() => Console.WriteLine(\"Projector is on\");\n    public void Off() => Console.WriteLine(\"Projector is off\");\n    public void WideScreenMode() => Console.WriteLine(\"Projector in widescreen mode\");\n}\n\npublic class Screen\n{\n    public void Down() => Console.WriteLine(\"Screen is down\");\n    public void Up() => Console.WriteLine(\"Screen is up\");\n}\n\n```\n\n## Facade class\n```csharp\npublic class HomeTheaterFacade\n{\n    private readonly Amplifier _amplifier;\n    private readonly DVDPlayer _dvdPlayer;\n    private readonly Projector _projector;\n    private readonly Screen _screen;\n\n    public HomeTheaterFacade(Amplifier amplifier, DVDPlayer dvdPlayer, Projector projector, Screen screen)\n    {\n        _amplifier = amplifier;\n        _dvdPlayer = dvdPlayer;\n        _projector = projector;\n        _screen = screen;\n    }\n\n    public void WatchMovie(string movie)\n    {\n        Console.WriteLine(\"Get ready to watch a movie...\");\n        _screen.Down();\n        _projector.On();\n        _projector.WideScreenMode();\n        _amplifier.On();\n        _amplifier.SetVolume(5);\n        _dvdPlayer.On();\n        _dvdPlayer.Play(movie);\n    }\n\n    public void EndMovie()\n    {\n        Console.WriteLine(\"Shutting movie theater down...\");\n        _dvdPlayer.Off();\n        _amplifier.Off();\n        _projector.Off();\n        _screen.Up();\n    }\n}\n```\n\n## Using the Facade\n```csharp\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Amplifier amplifier = new Amplifier();\n        DVDPlayer dvdPlayer = new DVDPlayer();\n        Projector projector = new Projector();\n        Screen screen = new Screen();\n\n        HomeTheaterFacade homeTheater = new HomeTheaterFacade(amplifier, dvdPlayer, projector, screen);\n\n        homeTheater.WatchMovie(\"Predator\");\n        // Output:\n        // Get ready to watch a movie...\n        // Screen is down\n        // Projector is on\n        // Projector in widescreen mode\n        // Amplifier is on\n        // Amplifier volume set to 5\n        // DVD Player is on\n        // Playing movie: Predator\n\n        homeTheater.EndMovie();\n        // Output:\n        // Shutting movie theater down...\n        // DVD Player is off\n        // Amplifier is off\n        // Projector is off\n        // Screen is up\n    }\n}\n```\n## Conclusion\nThe Facade design pattern is an excellent way to manage complexity in large systems by providing a simplified interface. In C#, the Facade pattern can significantly enhance code readability and maintainability, making it easier to interact with complex subsystems. By using the Facade pattern, you can create more modular, decoupled, and easy-to-use systems.","source":"_posts/facade-design-pattern.md","raw":"---\ntitle: Facade - Design Pattern\ndate: 2024-07-30 23:13:12\ntags:\n    - design pattern\ncategory:\n    - design pattern\n\nthumbnail: uploads/facade-design-pattern/cover.png\nbanner: uploads/facade-design-pattern/cover.png\n---\n![Alt Text](uploads/facade-design-pattern/cover.png)\n# What is the Facade Design Pattern?\n**The Facade design pattern** is a structural pattern that provides a simplified interface to a complex system of classes, libraries, or frameworks. It hides the complexities of the system and makes it easier to use by providing a unified, high-level interface.\n\n<!--more-->\n\n# Metaphor\n![Alt Text](uploads/facade-design-pattern/metaphor-facade.png)\nIn this image, we see an interface through which we can easily drive the car. The driver, through this high-level interface, interacts with other complicated subsystems (engine, other components). The driver may not know these subsystems, but can use this high-level interface, which represents the Facade, to drive the car.\n\n# UML Diagram\n![Alt Text](uploads/facade-design-pattern/UML.png)\n\n# Advantages of Using the Facade Pattern\n1. **Simplified Interface**: The Facade pattern provides a single, easy-to-use interface for complex subsystems.\n2. **Reduces Complexity**: By hiding the intricate details of the subsystems, it reduces the learning curve and eases the use of the system.\n3. **Decoupling**: It decouples the client code from the subsystem, making the code more modular and easier to maintain.\n4. **Improved Code Readability**: Simplified interfaces improve the readability and manageability of the code.\n\n# Implementing the Facade Pattern in C#\nConsider a scenario where we have a complex system for managing a home theater. It consists of several subsystems: Amplifier, DVDPlayer, Projector, and Screen. Let's implement a Facade for this system.\n\n![Alt Text](uploads/facade-design-pattern/home-theater.jpg)\n\n## Subsystem classes\n``` csharp\npublic class Amplifier\n{\n    public void On() => Console.WriteLine(\"Amplifier is on\");\n    public void Off() => Console.WriteLine(\"Amplifier is off\");\n    public void SetVolume(int level) => Console.WriteLine($\"Amplifier volume set to {level}\");\n}\n\npublic class DVDPlayer\n{\n    public void On() => Console.WriteLine(\"DVD Player is on\");\n    public void Off() => Console.WriteLine(\"DVD Player is off\");\n    public void Play(string movie) => Console.WriteLine($\"Playing movie: {movie}\");\n}\n\npublic class Projector\n{\n    public void On() => Console.WriteLine(\"Projector is on\");\n    public void Off() => Console.WriteLine(\"Projector is off\");\n    public void WideScreenMode() => Console.WriteLine(\"Projector in widescreen mode\");\n}\n\npublic class Screen\n{\n    public void Down() => Console.WriteLine(\"Screen is down\");\n    public void Up() => Console.WriteLine(\"Screen is up\");\n}\n\n```\n\n## Facade class\n```csharp\npublic class HomeTheaterFacade\n{\n    private readonly Amplifier _amplifier;\n    private readonly DVDPlayer _dvdPlayer;\n    private readonly Projector _projector;\n    private readonly Screen _screen;\n\n    public HomeTheaterFacade(Amplifier amplifier, DVDPlayer dvdPlayer, Projector projector, Screen screen)\n    {\n        _amplifier = amplifier;\n        _dvdPlayer = dvdPlayer;\n        _projector = projector;\n        _screen = screen;\n    }\n\n    public void WatchMovie(string movie)\n    {\n        Console.WriteLine(\"Get ready to watch a movie...\");\n        _screen.Down();\n        _projector.On();\n        _projector.WideScreenMode();\n        _amplifier.On();\n        _amplifier.SetVolume(5);\n        _dvdPlayer.On();\n        _dvdPlayer.Play(movie);\n    }\n\n    public void EndMovie()\n    {\n        Console.WriteLine(\"Shutting movie theater down...\");\n        _dvdPlayer.Off();\n        _amplifier.Off();\n        _projector.Off();\n        _screen.Up();\n    }\n}\n```\n\n## Using the Facade\n```csharp\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Amplifier amplifier = new Amplifier();\n        DVDPlayer dvdPlayer = new DVDPlayer();\n        Projector projector = new Projector();\n        Screen screen = new Screen();\n\n        HomeTheaterFacade homeTheater = new HomeTheaterFacade(amplifier, dvdPlayer, projector, screen);\n\n        homeTheater.WatchMovie(\"Predator\");\n        // Output:\n        // Get ready to watch a movie...\n        // Screen is down\n        // Projector is on\n        // Projector in widescreen mode\n        // Amplifier is on\n        // Amplifier volume set to 5\n        // DVD Player is on\n        // Playing movie: Predator\n\n        homeTheater.EndMovie();\n        // Output:\n        // Shutting movie theater down...\n        // DVD Player is off\n        // Amplifier is off\n        // Projector is off\n        // Screen is up\n    }\n}\n```\n## Conclusion\nThe Facade design pattern is an excellent way to manage complexity in large systems by providing a simplified interface. In C#, the Facade pattern can significantly enhance code readability and maintainability, making it easier to interact with complex subsystems. By using the Facade pattern, you can create more modular, decoupled, and easy-to-use systems.","slug":"facade-design-pattern","published":1,"updated":"2024-07-30T22:36:31.612Z","_id":"clz8vp3f900013ovkasyo82me","comments":1,"layout":"post","photos":[],"content":"<p><img src=\"/uploads/facade-design-pattern/cover.png\" alt=\"Alt Text\"></p>\n\n        <h1 id=\"What-is-the-Facade-Design-Pattern\"   >\n          <a href=\"#What-is-the-Facade-Design-Pattern\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#What-is-the-Facade-Design-Pattern\" class=\"headerlink\" title=\"What is the Facade Design Pattern?\"></a>What is the Facade Design Pattern?</h1>\n      <p><strong>The Facade design pattern</strong> is a structural pattern that provides a simplified interface to a complex system of classes, libraries, or frameworks. It hides the complexities of the system and makes it easier to use by providing a unified, high-level interface.</p>\n<span id=\"more\"></span>\n\n\n        <h1 id=\"Metaphor\"   >\n          <a href=\"#Metaphor\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Metaphor\" class=\"headerlink\" title=\"Metaphor\"></a>Metaphor</h1>\n      <p><img src=\"/uploads/facade-design-pattern/metaphor-facade.png\" alt=\"Alt Text\"><br>In this image, we see an interface through which we can easily drive the car. The driver, through this high-level interface, interacts with other complicated subsystems (engine, other components). The driver may not know these subsystems, but can use this high-level interface, which represents the Facade, to drive the car.</p>\n\n        <h1 id=\"UML-Diagram\"   >\n          <a href=\"#UML-Diagram\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#UML-Diagram\" class=\"headerlink\" title=\"UML Diagram\"></a>UML Diagram</h1>\n      <p><img src=\"/uploads/facade-design-pattern/UML.png\" alt=\"Alt Text\"></p>\n\n        <h1 id=\"Advantages-of-Using-the-Facade-Pattern\"   >\n          <a href=\"#Advantages-of-Using-the-Facade-Pattern\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Advantages-of-Using-the-Facade-Pattern\" class=\"headerlink\" title=\"Advantages of Using the Facade Pattern\"></a>Advantages of Using the Facade Pattern</h1>\n      <ol>\n<li><strong>Simplified Interface</strong>: The Facade pattern provides a single, easy-to-use interface for complex subsystems.</li>\n<li><strong>Reduces Complexity</strong>: By hiding the intricate details of the subsystems, it reduces the learning curve and eases the use of the system.</li>\n<li><strong>Decoupling</strong>: It decouples the client code from the subsystem, making the code more modular and easier to maintain.</li>\n<li><strong>Improved Code Readability</strong>: Simplified interfaces improve the readability and manageability of the code.</li>\n</ol>\n\n        <h1 id=\"Implementing-the-Facade-Pattern-in-C\"   >\n          <a href=\"#Implementing-the-Facade-Pattern-in-C\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Implementing-the-Facade-Pattern-in-C\" class=\"headerlink\" title=\"Implementing the Facade Pattern in C#\"></a>Implementing the Facade Pattern in C#</h1>\n      <p>Consider a scenario where we have a complex system for managing a home theater. It consists of several subsystems: Amplifier, DVDPlayer, Projector, and Screen. Let’s implement a Facade for this system.</p>\n<p><img src=\"/uploads/facade-design-pattern/home-theater.jpg\" alt=\"Alt Text\"></p>\n\n        <h2 id=\"Subsystem-classes\"   >\n          <a href=\"#Subsystem-classes\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Subsystem-classes\" class=\"headerlink\" title=\"Subsystem classes\"></a>Subsystem classes</h2>\n      <figure class=\"highlight csharp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Amplifier</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">On</span>()</span> =&gt; Console.WriteLine(<span class=\"string\">&quot;Amplifier is on&quot;</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Off</span>()</span> =&gt; Console.WriteLine(<span class=\"string\">&quot;Amplifier is off&quot;</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SetVolume</span>(<span class=\"params\"><span class=\"built_in\">int</span> level</span>)</span> =&gt; Console.WriteLine(<span class=\"string\">$&quot;Amplifier volume set to <span class=\"subst\">&#123;level&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DVDPlayer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">On</span>()</span> =&gt; Console.WriteLine(<span class=\"string\">&quot;DVD Player is on&quot;</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Off</span>()</span> =&gt; Console.WriteLine(<span class=\"string\">&quot;DVD Player is off&quot;</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Play</span>(<span class=\"params\"><span class=\"built_in\">string</span> movie</span>)</span> =&gt; Console.WriteLine(<span class=\"string\">$&quot;Playing movie: <span class=\"subst\">&#123;movie&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Projector</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">On</span>()</span> =&gt; Console.WriteLine(<span class=\"string\">&quot;Projector is on&quot;</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Off</span>()</span> =&gt; Console.WriteLine(<span class=\"string\">&quot;Projector is off&quot;</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">WideScreenMode</span>()</span> =&gt; Console.WriteLine(<span class=\"string\">&quot;Projector in widescreen mode&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Screen</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Down</span>()</span> =&gt; Console.WriteLine(<span class=\"string\">&quot;Screen is down&quot;</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Up</span>()</span> =&gt; Console.WriteLine(<span class=\"string\">&quot;Screen is up&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n\n\n        <h2 id=\"Facade-class\"   >\n          <a href=\"#Facade-class\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Facade-class\" class=\"headerlink\" title=\"Facade class\"></a>Facade class</h2>\n      <figure class=\"highlight csharp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeTheaterFacade</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Amplifier _amplifier;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> DVDPlayer _dvdPlayer;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Projector _projector;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Screen _screen;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HomeTheaterFacade</span>(<span class=\"params\">Amplifier amplifier, DVDPlayer dvdPlayer, Projector projector, Screen screen</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _amplifier = amplifier;</span><br><span class=\"line\">        _dvdPlayer = dvdPlayer;</span><br><span class=\"line\">        _projector = projector;</span><br><span class=\"line\">        _screen = screen;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">WatchMovie</span>(<span class=\"params\"><span class=\"built_in\">string</span> movie</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;Get ready to watch a movie...&quot;</span>);</span><br><span class=\"line\">        _screen.Down();</span><br><span class=\"line\">        _projector.On();</span><br><span class=\"line\">        _projector.WideScreenMode();</span><br><span class=\"line\">        _amplifier.On();</span><br><span class=\"line\">        _amplifier.SetVolume(<span class=\"number\">5</span>);</span><br><span class=\"line\">        _dvdPlayer.On();</span><br><span class=\"line\">        _dvdPlayer.Play(movie);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">EndMovie</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;Shutting movie theater down...&quot;</span>);</span><br><span class=\"line\">        _dvdPlayer.Off();</span><br><span class=\"line\">        _amplifier.Off();</span><br><span class=\"line\">        _projector.Off();</span><br><span class=\"line\">        _screen.Up();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h2 id=\"Using-the-Facade\"   >\n          <a href=\"#Using-the-Facade\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Using-the-Facade\" class=\"headerlink\" title=\"Using the Facade\"></a>Using the Facade</h2>\n      <figure class=\"highlight csharp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Amplifier amplifier = <span class=\"keyword\">new</span> Amplifier();</span><br><span class=\"line\">        DVDPlayer dvdPlayer = <span class=\"keyword\">new</span> DVDPlayer();</span><br><span class=\"line\">        Projector projector = <span class=\"keyword\">new</span> Projector();</span><br><span class=\"line\">        Screen screen = <span class=\"keyword\">new</span> Screen();</span><br><span class=\"line\"></span><br><span class=\"line\">        HomeTheaterFacade homeTheater = <span class=\"keyword\">new</span> HomeTheaterFacade(amplifier, dvdPlayer, projector, screen);</span><br><span class=\"line\"></span><br><span class=\"line\">        homeTheater.WatchMovie(<span class=\"string\">&quot;Predator&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Output:</span></span><br><span class=\"line\">        <span class=\"comment\">// Get ready to watch a movie...</span></span><br><span class=\"line\">        <span class=\"comment\">// Screen is down</span></span><br><span class=\"line\">        <span class=\"comment\">// Projector is on</span></span><br><span class=\"line\">        <span class=\"comment\">// Projector in widescreen mode</span></span><br><span class=\"line\">        <span class=\"comment\">// Amplifier is on</span></span><br><span class=\"line\">        <span class=\"comment\">// Amplifier volume set to 5</span></span><br><span class=\"line\">        <span class=\"comment\">// DVD Player is on</span></span><br><span class=\"line\">        <span class=\"comment\">// Playing movie: Predator</span></span><br><span class=\"line\"></span><br><span class=\"line\">        homeTheater.EndMovie();</span><br><span class=\"line\">        <span class=\"comment\">// Output:</span></span><br><span class=\"line\">        <span class=\"comment\">// Shutting movie theater down...</span></span><br><span class=\"line\">        <span class=\"comment\">// DVD Player is off</span></span><br><span class=\"line\">        <span class=\"comment\">// Amplifier is off</span></span><br><span class=\"line\">        <span class=\"comment\">// Projector is off</span></span><br><span class=\"line\">        <span class=\"comment\">// Screen is up</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n        <h2 id=\"Conclusion\"   >\n          <a href=\"#Conclusion\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2>\n      <p>The Facade design pattern is an excellent way to manage complexity in large systems by providing a simplified interface. In C#, the Facade pattern can significantly enhance code readability and maintainability, making it easier to interact with complex subsystems. By using the Facade pattern, you can create more modular, decoupled, and easy-to-use systems.</p>\n","excerpt":"<p><img src=\"/uploads/facade-design-pattern/cover.png\" alt=\"Alt Text\"></p>\n\n        <h1 id=\"What-is-the-Facade-Design-Pattern\"   >\n          <a href=\"#What-is-the-Facade-Design-Pattern\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#What-is-the-Facade-Design-Pattern\" class=\"headerlink\" title=\"What is the Facade Design Pattern?\"></a>What is the Facade Design Pattern?</h1>\n      <p><strong>The Facade design pattern</strong> is a structural pattern that provides a simplified interface to a complex system of classes, libraries, or frameworks. It hides the complexities of the system and makes it easier to use by providing a unified, high-level interface.</p>","more":"<h1 id=\"Metaphor\"   >\n          <a href=\"#Metaphor\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Metaphor\" class=\"headerlink\" title=\"Metaphor\"></a>Metaphor</h1>\n      <p><img src=\"/uploads/facade-design-pattern/metaphor-facade.png\" alt=\"Alt Text\"><br>In this image, we see an interface through which we can easily drive the car. The driver, through this high-level interface, interacts with other complicated subsystems (engine, other components). The driver may not know these subsystems, but can use this high-level interface, which represents the Facade, to drive the car.</p>\n\n        <h1 id=\"UML-Diagram\"   >\n          <a href=\"#UML-Diagram\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#UML-Diagram\" class=\"headerlink\" title=\"UML Diagram\"></a>UML Diagram</h1>\n      <p><img src=\"/uploads/facade-design-pattern/UML.png\" alt=\"Alt Text\"></p>\n\n        <h1 id=\"Advantages-of-Using-the-Facade-Pattern\"   >\n          <a href=\"#Advantages-of-Using-the-Facade-Pattern\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Advantages-of-Using-the-Facade-Pattern\" class=\"headerlink\" title=\"Advantages of Using the Facade Pattern\"></a>Advantages of Using the Facade Pattern</h1>\n      <ol>\n<li><strong>Simplified Interface</strong>: The Facade pattern provides a single, easy-to-use interface for complex subsystems.</li>\n<li><strong>Reduces Complexity</strong>: By hiding the intricate details of the subsystems, it reduces the learning curve and eases the use of the system.</li>\n<li><strong>Decoupling</strong>: It decouples the client code from the subsystem, making the code more modular and easier to maintain.</li>\n<li><strong>Improved Code Readability</strong>: Simplified interfaces improve the readability and manageability of the code.</li>\n</ol>\n\n        <h1 id=\"Implementing-the-Facade-Pattern-in-C\"   >\n          <a href=\"#Implementing-the-Facade-Pattern-in-C\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Implementing-the-Facade-Pattern-in-C\" class=\"headerlink\" title=\"Implementing the Facade Pattern in C#\"></a>Implementing the Facade Pattern in C#</h1>\n      <p>Consider a scenario where we have a complex system for managing a home theater. It consists of several subsystems: Amplifier, DVDPlayer, Projector, and Screen. Let’s implement a Facade for this system.</p>\n<p><img src=\"/uploads/facade-design-pattern/home-theater.jpg\" alt=\"Alt Text\"></p>\n\n        <h2 id=\"Subsystem-classes\"   >\n          <a href=\"#Subsystem-classes\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Subsystem-classes\" class=\"headerlink\" title=\"Subsystem classes\"></a>Subsystem classes</h2>\n      <figure class=\"highlight csharp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Amplifier</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">On</span>()</span> =&gt; Console.WriteLine(<span class=\"string\">&quot;Amplifier is on&quot;</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Off</span>()</span> =&gt; Console.WriteLine(<span class=\"string\">&quot;Amplifier is off&quot;</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">SetVolume</span>(<span class=\"params\"><span class=\"built_in\">int</span> level</span>)</span> =&gt; Console.WriteLine(<span class=\"string\">$&quot;Amplifier volume set to <span class=\"subst\">&#123;level&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">DVDPlayer</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">On</span>()</span> =&gt; Console.WriteLine(<span class=\"string\">&quot;DVD Player is on&quot;</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Off</span>()</span> =&gt; Console.WriteLine(<span class=\"string\">&quot;DVD Player is off&quot;</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Play</span>(<span class=\"params\"><span class=\"built_in\">string</span> movie</span>)</span> =&gt; Console.WriteLine(<span class=\"string\">$&quot;Playing movie: <span class=\"subst\">&#123;movie&#125;</span>&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Projector</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">On</span>()</span> =&gt; Console.WriteLine(<span class=\"string\">&quot;Projector is on&quot;</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Off</span>()</span> =&gt; Console.WriteLine(<span class=\"string\">&quot;Projector is off&quot;</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">WideScreenMode</span>()</span> =&gt; Console.WriteLine(<span class=\"string\">&quot;Projector in widescreen mode&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">Screen</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Down</span>()</span> =&gt; Console.WriteLine(<span class=\"string\">&quot;Screen is down&quot;</span>);</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Up</span>()</span> =&gt; Console.WriteLine(<span class=\"string\">&quot;Screen is up&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></div></figure>\n\n\n        <h2 id=\"Facade-class\"   >\n          <a href=\"#Facade-class\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Facade-class\" class=\"headerlink\" title=\"Facade class\"></a>Facade class</h2>\n      <figure class=\"highlight csharp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">HomeTheaterFacade</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Amplifier _amplifier;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> DVDPlayer _dvdPlayer;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Projector _projector;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">readonly</span> Screen _screen;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HomeTheaterFacade</span>(<span class=\"params\">Amplifier amplifier, DVDPlayer dvdPlayer, Projector projector, Screen screen</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        _amplifier = amplifier;</span><br><span class=\"line\">        _dvdPlayer = dvdPlayer;</span><br><span class=\"line\">        _projector = projector;</span><br><span class=\"line\">        _screen = screen;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">WatchMovie</span>(<span class=\"params\"><span class=\"built_in\">string</span> movie</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;Get ready to watch a movie...&quot;</span>);</span><br><span class=\"line\">        _screen.Down();</span><br><span class=\"line\">        _projector.On();</span><br><span class=\"line\">        _projector.WideScreenMode();</span><br><span class=\"line\">        _amplifier.On();</span><br><span class=\"line\">        _amplifier.SetVolume(<span class=\"number\">5</span>);</span><br><span class=\"line\">        _dvdPlayer.On();</span><br><span class=\"line\">        _dvdPlayer.Play(movie);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">EndMovie</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Console.WriteLine(<span class=\"string\">&quot;Shutting movie theater down...&quot;</span>);</span><br><span class=\"line\">        _dvdPlayer.Off();</span><br><span class=\"line\">        _amplifier.Off();</span><br><span class=\"line\">        _projector.Off();</span><br><span class=\"line\">        _screen.Up();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n\n        <h2 id=\"Using-the-Facade\"   >\n          <a href=\"#Using-the-Facade\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Using-the-Facade\" class=\"headerlink\" title=\"Using the Facade\"></a>Using the Facade</h2>\n      <figure class=\"highlight csharp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title\">Program</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Main</span>(<span class=\"params\"><span class=\"built_in\">string</span>[] args</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        Amplifier amplifier = <span class=\"keyword\">new</span> Amplifier();</span><br><span class=\"line\">        DVDPlayer dvdPlayer = <span class=\"keyword\">new</span> DVDPlayer();</span><br><span class=\"line\">        Projector projector = <span class=\"keyword\">new</span> Projector();</span><br><span class=\"line\">        Screen screen = <span class=\"keyword\">new</span> Screen();</span><br><span class=\"line\"></span><br><span class=\"line\">        HomeTheaterFacade homeTheater = <span class=\"keyword\">new</span> HomeTheaterFacade(amplifier, dvdPlayer, projector, screen);</span><br><span class=\"line\"></span><br><span class=\"line\">        homeTheater.WatchMovie(<span class=\"string\">&quot;Predator&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// Output:</span></span><br><span class=\"line\">        <span class=\"comment\">// Get ready to watch a movie...</span></span><br><span class=\"line\">        <span class=\"comment\">// Screen is down</span></span><br><span class=\"line\">        <span class=\"comment\">// Projector is on</span></span><br><span class=\"line\">        <span class=\"comment\">// Projector in widescreen mode</span></span><br><span class=\"line\">        <span class=\"comment\">// Amplifier is on</span></span><br><span class=\"line\">        <span class=\"comment\">// Amplifier volume set to 5</span></span><br><span class=\"line\">        <span class=\"comment\">// DVD Player is on</span></span><br><span class=\"line\">        <span class=\"comment\">// Playing movie: Predator</span></span><br><span class=\"line\"></span><br><span class=\"line\">        homeTheater.EndMovie();</span><br><span class=\"line\">        <span class=\"comment\">// Output:</span></span><br><span class=\"line\">        <span class=\"comment\">// Shutting movie theater down...</span></span><br><span class=\"line\">        <span class=\"comment\">// DVD Player is off</span></span><br><span class=\"line\">        <span class=\"comment\">// Amplifier is off</span></span><br><span class=\"line\">        <span class=\"comment\">// Projector is off</span></span><br><span class=\"line\">        <span class=\"comment\">// Screen is up</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n        <h2 id=\"Conclusion\"   >\n          <a href=\"#Conclusion\" class=\"heading-link\"><i class=\"fas fa-link\"></i></a><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2>\n      <p>The Facade design pattern is an excellent way to manage complexity in large systems by providing a simplified interface. In C#, the Facade pattern can significantly enhance code readability and maintainability, making it easier to interact with complex subsystems. By using the Facade pattern, you can create more modular, decoupled, and easy-to-use systems.</p>"},{"title":"Leaking domain knowledge to tests - Anti-pattern","date":"2024-06-16T21:56:35.000Z","thumbnail":"uploads/leaking-domain-knowledge-antipattern/cover.png","banner":"uploads/leaking-domain-knowledge-antipattern/cover.png","_content":"![Alt Text](uploads/leaking-domain-knowledge-antipattern/cover.png)\nLeaking domain knowledge to tests is an anti-pattern in software development and testing. It occurs when the test code contains information about the implementation details of the system under test (SUT) rather than focusing on its behavior and expected outcomes. This can lead to a number of issues that undermine the effectiveness and maintainability of the tests.\n\n<!--more-->\n\nIt usually, takes place in tests that cover complex algorithms.\nLet's look at the following simple example.\n\nExample 1:\n``` csharp\npublic static class Calculator\n{\n    public static int Add(int value1, int value2)\n    {\n        return value1 + value2;\n    }\n}\n```\nWe have the ***Calculator*** class with a single ***Add*** method. \nLet's try to write an unit test.\n\nExample 2: An incorrect way ❌\n``` csharp\npublic class CalculatorTests\n{\n    [Fact]\n    public void Adding_two_numbers()\n    {\n        int value1 = 1;\n        int value2 = 3;\n        int expected = value1 + value2;   //   <--- The leakage\n        \n        int actual = Calculator.Add(value1, value2);\n        Assert.Equal(expected, actual);\n    }\n}\n```\nIt looks fine, but, ***it is an anti-pattern*** because we repeat the algorithm from the ***Calculator*** class in our test method:\n``` csharp\nint expected = value1 + value2;\n```\nImagine that some changes will be made to the algorithm of the ***Add*** method from the ***Calculator*** class. Therefore, it will be necessary to make the same change in the unit test. So this is the biggest problem: Weak resistance to refactoring.\n\nHow to test the algorithm properly, then !?\nSo, instead of duplicating the algorithm, hard-code its expected results into the test, as demonstrated in the following example.\n\nExample 3: A correct way ✔️\n\n``` csharp\npublic class CalculatorTests\n{\n    [Theory]\n    [InlineData(1, 3, 4)]\n    [InlineData(11, 33, 44)]\n    [InlineData(100, 500, 600)]\n    public void Adding_two_numbers(int value1, int value2, int expected)\n    {\n        int actual = Calculator.Add(value1, value2);\n        Assert.Equal(expected, actual);\n    }\n}\n```\n\nThis example I found in Vladimir Khorikov's book - 'Unit Testing Principles, Practices, and Patterns'. It is indeed highly recommended for anyone interested in improving their understanding and practice of unit testing. It provides valuable insights, practical advice, and best practices for writing effective unit tests.\n\nKey Characteristics of the Antipattern\n\n1. ***Implementation Details in Tests***: Tests include specifics about how the code is implemented rather than what it should do. For example, knowing the exact data structures or internal workings of the functions being tested.\n\n2. ***Tight Coupling***: Tests become tightly coupled to the implementation. If the implementation changes, even if the external behavior remains the same, the tests break and need to be updated.\n\n3. ***Reduced Readability***: Tests become harder to understand because they include complex implementation details that are not necessary for understanding the expected behavior.\n\n4. ***Fragility***: Tests become fragile and more prone to failure due to minor changes in the codebase that do not affect the overall functionality but alter the internal implementation.\n\n5. ***Limited Refactoring***: Developers are discouraged from refactoring code, as such changes would require corresponding changes in the test code, making refactoring a more daunting task.","source":"_posts/leaking-domain-knowledge-antipattern.md","raw":"---\ntitle: Leaking domain knowledge to tests - Anti-pattern\ndate: 2024-06-17 00:56:35\ntags: \n    - unit testing\n    - anti-pattern\ncategory:\n    - unit testing\n\nthumbnail: uploads/leaking-domain-knowledge-antipattern/cover.png\nbanner: uploads/leaking-domain-knowledge-antipattern/cover.png\n---\n![Alt Text](uploads/leaking-domain-knowledge-antipattern/cover.png)\nLeaking domain knowledge to tests is an anti-pattern in software development and testing. It occurs when the test code contains information about the implementation details of the system under test (SUT) rather than focusing on its behavior and expected outcomes. This can lead to a number of issues that undermine the effectiveness and maintainability of the tests.\n\n<!--more-->\n\nIt usually, takes place in tests that cover complex algorithms.\nLet's look at the following simple example.\n\nExample 1:\n``` csharp\npublic static class Calculator\n{\n    public static int Add(int value1, int value2)\n    {\n        return value1 + value2;\n    }\n}\n```\nWe have the ***Calculator*** class with a single ***Add*** method. \nLet's try to write an unit test.\n\nExample 2: An incorrect way ❌\n``` csharp\npublic class CalculatorTests\n{\n    [Fact]\n    public void Adding_two_numbers()\n    {\n        int value1 = 1;\n        int value2 = 3;\n        int expected = value1 + value2;   //   <--- The leakage\n        \n        int actual = Calculator.Add(value1, value2);\n        Assert.Equal(expected, actual);\n    }\n}\n```\nIt looks fine, but, ***it is an anti-pattern*** because we repeat the algorithm from the ***Calculator*** class in our test method:\n``` csharp\nint expected = value1 + value2;\n```\nImagine that some changes will be made to the algorithm of the ***Add*** method from the ***Calculator*** class. Therefore, it will be necessary to make the same change in the unit test. So this is the biggest problem: Weak resistance to refactoring.\n\nHow to test the algorithm properly, then !?\nSo, instead of duplicating the algorithm, hard-code its expected results into the test, as demonstrated in the following example.\n\nExample 3: A correct way ✔️\n\n``` csharp\npublic class CalculatorTests\n{\n    [Theory]\n    [InlineData(1, 3, 4)]\n    [InlineData(11, 33, 44)]\n    [InlineData(100, 500, 600)]\n    public void Adding_two_numbers(int value1, int value2, int expected)\n    {\n        int actual = Calculator.Add(value1, value2);\n        Assert.Equal(expected, actual);\n    }\n}\n```\n\nThis example I found in Vladimir Khorikov's book - 'Unit Testing Principles, Practices, and Patterns'. It is indeed highly recommended for anyone interested in improving their understanding and practice of unit testing. It provides valuable insights, practical advice, and best practices for writing effective unit tests.\n\nKey Characteristics of the Antipattern\n\n1. ***Implementation Details in Tests***: Tests include specifics about how the code is implemented rather than what it should do. For example, knowing the exact data structures or internal workings of the functions being tested.\n\n2. ***Tight Coupling***: Tests become tightly coupled to the implementation. If the implementation changes, even if the external behavior remains the same, the tests break and need to be updated.\n\n3. ***Reduced Readability***: Tests become harder to understand because they include complex implementation details that are not necessary for understanding the expected behavior.\n\n4. ***Fragility***: Tests become fragile and more prone to failure due to minor changes in the codebase that do not affect the overall functionality but alter the internal implementation.\n\n5. ***Limited Refactoring***: Developers are discouraged from refactoring code, as such changes would require corresponding changes in the test code, making refactoring a more daunting task.","slug":"leaking-domain-knowledge-antipattern","published":1,"updated":"2024-06-16T23:52:54.642Z","comments":1,"layout":"post","photos":[],"_id":"clz8vp3fb00033ovkd3qq6y14","content":"<p><img src=\"/uploads/leaking-domain-knowledge-antipattern/cover.png\" alt=\"Alt Text\"><br>Leaking domain knowledge to tests is an anti-pattern in software development and testing. It occurs when the test code contains information about the implementation details of the system under test (SUT) rather than focusing on its behavior and expected outcomes. This can lead to a number of issues that undermine the effectiveness and maintainability of the tests.</p>\n<span id=\"more\"></span>\n\n<p>It usually, takes place in tests that cover complex algorithms.<br>Let’s look at the following simple example.</p>\n<p>Example 1:</p>\n<figure class=\"highlight csharp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">Calculator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">int</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"built_in\">int</span> value1, <span class=\"built_in\">int</span> value2</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value1 + value2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>We have the <em><strong>Calculator</strong></em> class with a single <em><strong>Add</strong></em> method.<br>Let’s try to write an unit test.</p>\n<p>Example 2: An incorrect way ❌</p>\n<figure class=\"highlight csharp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CalculatorTests</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Fact</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Adding_two_numbers</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> value1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> value2 = <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> expected = value1 + value2;   <span class=\"comment\">//   &lt;--- The leakage</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">int</span> actual = Calculator.Add(value1, value2);</span><br><span class=\"line\">        Assert.Equal(expected, actual);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>It looks fine, but, <em><strong>it is an anti-pattern</strong></em> because we repeat the algorithm from the <em><strong>Calculator</strong></em> class in our test method:</p>\n<figure class=\"highlight csharp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> expected = value1 + value2;</span><br></pre></td></tr></table></div></figure>\n<p>Imagine that some changes will be made to the algorithm of the <em><strong>Add</strong></em> method from the <em><strong>Calculator</strong></em> class. Therefore, it will be necessary to make the same change in the unit test. So this is the biggest problem: Weak resistance to refactoring.</p>\n<p>How to test the algorithm properly, then !?<br>So, instead of duplicating the algorithm, hard-code its expected results into the test, as demonstrated in the following example.</p>\n<p>Example 3: A correct way ✔️</p>\n<figure class=\"highlight csharp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CalculatorTests</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Theory</span>]</span><br><span class=\"line\">    [<span class=\"meta\">InlineData(1, 3, 4)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">InlineData(11, 33, 44)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">InlineData(100, 500, 600)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Adding_two_numbers</span>(<span class=\"params\"><span class=\"built_in\">int</span> value1, <span class=\"built_in\">int</span> value2, <span class=\"built_in\">int</span> expected</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> actual = Calculator.Add(value1, value2);</span><br><span class=\"line\">        Assert.Equal(expected, actual);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>This example I found in Vladimir Khorikov’s book - ‘Unit Testing Principles, Practices, and Patterns’. It is indeed highly recommended for anyone interested in improving their understanding and practice of unit testing. It provides valuable insights, practical advice, and best practices for writing effective unit tests.</p>\n<p>Key Characteristics of the Antipattern</p>\n<ol>\n<li><p><em><strong>Implementation Details in Tests</strong></em>: Tests include specifics about how the code is implemented rather than what it should do. For example, knowing the exact data structures or internal workings of the functions being tested.</p>\n</li>\n<li><p><em><strong>Tight Coupling</strong></em>: Tests become tightly coupled to the implementation. If the implementation changes, even if the external behavior remains the same, the tests break and need to be updated.</p>\n</li>\n<li><p><em><strong>Reduced Readability</strong></em>: Tests become harder to understand because they include complex implementation details that are not necessary for understanding the expected behavior.</p>\n</li>\n<li><p><em><strong>Fragility</strong></em>: Tests become fragile and more prone to failure due to minor changes in the codebase that do not affect the overall functionality but alter the internal implementation.</p>\n</li>\n<li><p><em><strong>Limited Refactoring</strong></em>: Developers are discouraged from refactoring code, as such changes would require corresponding changes in the test code, making refactoring a more daunting task.</p>\n</li>\n</ol>\n","excerpt":"<p><img src=\"/uploads/leaking-domain-knowledge-antipattern/cover.png\" alt=\"Alt Text\"><br>Leaking domain knowledge to tests is an anti-pattern in software development and testing. It occurs when the test code contains information about the implementation details of the system under test (SUT) rather than focusing on its behavior and expected outcomes. This can lead to a number of issues that undermine the effectiveness and maintainability of the tests.</p>","more":"<p>It usually, takes place in tests that cover complex algorithms.<br>Let’s look at the following simple example.</p>\n<p>Example 1:</p>\n<figure class=\"highlight csharp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title\">Calculator</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">int</span> <span class=\"title\">Add</span>(<span class=\"params\"><span class=\"built_in\">int</span> value1, <span class=\"built_in\">int</span> value2</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value1 + value2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>We have the <em><strong>Calculator</strong></em> class with a single <em><strong>Add</strong></em> method.<br>Let’s try to write an unit test.</p>\n<p>Example 2: An incorrect way ❌</p>\n<figure class=\"highlight csharp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CalculatorTests</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Fact</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Adding_two_numbers</span>()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> value1 = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> value2 = <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> expected = value1 + value2;   <span class=\"comment\">//   &lt;--- The leakage</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">int</span> actual = Calculator.Add(value1, value2);</span><br><span class=\"line\">        Assert.Equal(expected, actual);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n<p>It looks fine, but, <em><strong>it is an anti-pattern</strong></em> because we repeat the algorithm from the <em><strong>Calculator</strong></em> class in our test method:</p>\n<figure class=\"highlight csharp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">int</span> expected = value1 + value2;</span><br></pre></td></tr></table></div></figure>\n<p>Imagine that some changes will be made to the algorithm of the <em><strong>Add</strong></em> method from the <em><strong>Calculator</strong></em> class. Therefore, it will be necessary to make the same change in the unit test. So this is the biggest problem: Weak resistance to refactoring.</p>\n<p>How to test the algorithm properly, then !?<br>So, instead of duplicating the algorithm, hard-code its expected results into the test, as demonstrated in the following example.</p>\n<p>Example 3: A correct way ✔️</p>\n<figure class=\"highlight csharp\"><div class=\"table-container\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CalculatorTests</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    [<span class=\"meta\">Theory</span>]</span><br><span class=\"line\">    [<span class=\"meta\">InlineData(1, 3, 4)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">InlineData(11, 33, 44)</span>]</span><br><span class=\"line\">    [<span class=\"meta\">InlineData(100, 500, 600)</span>]</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">Adding_two_numbers</span>(<span class=\"params\"><span class=\"built_in\">int</span> value1, <span class=\"built_in\">int</span> value2, <span class=\"built_in\">int</span> expected</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> actual = Calculator.Add(value1, value2);</span><br><span class=\"line\">        Assert.Equal(expected, actual);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>\n\n<p>This example I found in Vladimir Khorikov’s book - ‘Unit Testing Principles, Practices, and Patterns’. It is indeed highly recommended for anyone interested in improving their understanding and practice of unit testing. It provides valuable insights, practical advice, and best practices for writing effective unit tests.</p>\n<p>Key Characteristics of the Antipattern</p>\n<ol>\n<li><p><em><strong>Implementation Details in Tests</strong></em>: Tests include specifics about how the code is implemented rather than what it should do. For example, knowing the exact data structures or internal workings of the functions being tested.</p>\n</li>\n<li><p><em><strong>Tight Coupling</strong></em>: Tests become tightly coupled to the implementation. If the implementation changes, even if the external behavior remains the same, the tests break and need to be updated.</p>\n</li>\n<li><p><em><strong>Reduced Readability</strong></em>: Tests become harder to understand because they include complex implementation details that are not necessary for understanding the expected behavior.</p>\n</li>\n<li><p><em><strong>Fragility</strong></em>: Tests become fragile and more prone to failure due to minor changes in the codebase that do not affect the overall functionality but alter the internal implementation.</p>\n</li>\n<li><p><em><strong>Limited Refactoring</strong></em>: Developers are discouraged from refactoring code, as such changes would require corresponding changes in the test code, making refactoring a more daunting task.</p>\n</li>\n</ol>"}],"PostAsset":[],"PostCategory":[{"post_id":"clz8vp3f900013ovkasyo82me","category_id":"clz8vp3fd00043ovkbjan269c","_id":"clz8vp3fg000b3ovkeg8n5dj4"},{"post_id":"clz8vp3fb00033ovkd3qq6y14","category_id":"clz8vp3ff00083ovk6k942vq2","_id":"clz8vp3fg000d3ovkef1a86b1"}],"PostTag":[{"post_id":"clz8vp3f900013ovkasyo82me","tag_id":"clz8vp3fe00053ovk0z9x5cds","_id":"clz8vp3ff000a3ovk7o0w1w8c"},{"post_id":"clz8vp3fb00033ovkd3qq6y14","tag_id":"clz8vp3ff00093ovk2iea04bc","_id":"clz8vp3fg000e3ovkhgu0bcfr"},{"post_id":"clz8vp3fb00033ovkd3qq6y14","tag_id":"clz8vp3fg000c3ovk625n0rh0","_id":"clz8vp3fg000f3ovkco4q4e62"}],"Tag":[{"name":"design pattern","_id":"clz8vp3fe00053ovk0z9x5cds"},{"name":"unit testing","_id":"clz8vp3ff00093ovk2iea04bc"},{"name":"anti-pattern","_id":"clz8vp3fg000c3ovk625n0rh0"}]}}